//
// transpose_ispc.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif

#ifndef __ISPC_STRUCT_gridDim__
#define __ISPC_STRUCT_gridDim__
struct gridDim {
    uint16_t gridDim_z;
    uint16_t gridDim_y;
    uint16_t gridDim_x;
};
#endif

#ifndef __ISPC_STRUCT_blockDim__
#define __ISPC_STRUCT_blockDim__
struct blockDim {
    uint16_t blockDim_z;
    uint16_t blockDim_y;
    uint16_t blockDim_x;
};
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void transpose_parallel_per_element_ispc(struct gridDim &grid_dim, struct blockDim &block_dim, int32_t * a, int32_t * b, uint32_t N, uint32_t K);
    extern void transpose_parallel_per_element_ispc_task(struct gridDim &grid_dim, struct blockDim &block_dim, int32_t * a, int32_t * b, uint32_t N, uint32_t K);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
